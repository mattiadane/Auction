/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctionEnd"
      | "auctionEndTime"
      | "bid"
      | "getEnded"
      | "getRefund"
      | "highestBid"
      | "highestBidder"
      | "owner"
      | "withdraw"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewOffer" | "endedAuction"): EventFragment;

  encodeFunctionData(
    functionFragment: "auctionEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bid", values?: undefined): string;
  encodeFunctionData(functionFragment: "getEnded", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRefund",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "highestBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBidder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "auctionEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEnded", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRefund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "highestBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "highestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace NewOfferEvent {
  export type InputTuple = [amount: BigNumberish, bidder: AddressLike];
  export type OutputTuple = [amount: bigint, bidder: string];
  export interface OutputObject {
    amount: bigint;
    bidder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace endedAuctionEvent {
  export type InputTuple = [
    amountSpent: BigNumberish,
    highestBidder: AddressLike
  ];
  export type OutputTuple = [amountSpent: bigint, highestBidder: string];
  export interface OutputObject {
    amountSpent: bigint;
    highestBidder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Auction extends BaseContract {
  connect(runner?: ContractRunner | null): Auction;
  waitForDeployment(): Promise<this>;

  interface: AuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctionEnd: TypedContractMethod<[], [void], "nonpayable">;

  auctionEndTime: TypedContractMethod<[], [bigint], "view">;

  bid: TypedContractMethod<[], [void], "payable">;

  getEnded: TypedContractMethod<[], [boolean], "view">;

  getRefund: TypedContractMethod<[bidder: AddressLike], [bigint], "view">;

  highestBid: TypedContractMethod<[], [bigint], "view">;

  highestBidder: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctionEnd"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "auctionEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bid"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getEnded"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getRefund"
  ): TypedContractMethod<[bidder: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "highestBid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "highestBidder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "NewOffer"
  ): TypedContractEvent<
    NewOfferEvent.InputTuple,
    NewOfferEvent.OutputTuple,
    NewOfferEvent.OutputObject
  >;
  getEvent(
    key: "endedAuction"
  ): TypedContractEvent<
    endedAuctionEvent.InputTuple,
    endedAuctionEvent.OutputTuple,
    endedAuctionEvent.OutputObject
  >;

  filters: {
    "NewOffer(uint256,address)": TypedContractEvent<
      NewOfferEvent.InputTuple,
      NewOfferEvent.OutputTuple,
      NewOfferEvent.OutputObject
    >;
    NewOffer: TypedContractEvent<
      NewOfferEvent.InputTuple,
      NewOfferEvent.OutputTuple,
      NewOfferEvent.OutputObject
    >;

    "endedAuction(uint256,address)": TypedContractEvent<
      endedAuctionEvent.InputTuple,
      endedAuctionEvent.OutputTuple,
      endedAuctionEvent.OutputObject
    >;
    endedAuction: TypedContractEvent<
      endedAuctionEvent.InputTuple,
      endedAuctionEvent.OutputTuple,
      endedAuctionEvent.OutputObject
    >;
  };
}
